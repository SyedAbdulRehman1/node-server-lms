// MongoDB datasource
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
    id       String    @id @default(auto()) @map("_id") @db.ObjectId
  // id            String   @id @default(auto()) @map("_id")  // MongoDB ID (ObjectId)
  name          String?
  email         String   @unique
  password      String?
  refreshToken  String?
  userType      UserType @default(STUDENT)
  emailVerified Boolean?
  image         String?
  resetToken    String?
  resetTokenExpiry DateTime?
  role          UserType @default(STUDENT)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  accounts      Account[]
  chats         Chat[]    @relation("UserChats")
}

model Chat {
    id       String    @id @default(auto()) @map("_id") @db.ObjectId

  userId    String
  title     String
  messages  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation("UserChats", fields: [userId], references: [id])
}

model Account {
    id       String    @id @default(auto()) @map("_id") @db.ObjectId

  type                  String
  provider              String
  providerAccountId     String
  refresh_token         String?
  access_token          String?
  expires_at            Int?
  token_type            String?
  scope                 String?
  id_token              String?
  session_state         String?
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                String
  @@unique([provider, providerAccountId])
}

model Course {
    id       String    @id @default(auto()) @map("_id") @db.ObjectId
  userId      String
  title       String
  description String?
  imageUrl    String?
  price       Float?
  isPublished Boolean  @default(false)
  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id])
  chapters    Chapter[]
  attachments Attachment[]
  purchases   Purchase[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Category {
    id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name    String   @unique
  courses Course[]
}

model Attachment {
    id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  url       String
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chapter {
    id       String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  videoUrl    String?
  position    Int
  isPublished Boolean  @default(false)
  isFree      Boolean  @default(false)
  muxData     MuxData?
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  userProgress UserProgress[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model MuxData {
    id       String    @id @default(auto()) @map("_id") @db.ObjectId
  assetId   String
  playbackId String?
  chapterId String   @unique
  chapter   Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
    id       String    @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  chapterId String
  chapter   Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  isCompleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([userId, chapterId])
}

model Purchase {
    id       String    @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([userId, courseId])
}

model StripeCustomer {
    id       String    @id @default(auto()) @map("_id") @db.ObjectId
  userId           String   @unique
  stripeCustomerId String   @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

enum UserType {
  TEACHER
  STUDENT
  SUPER_ADMIN
}
